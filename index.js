// Generated by CoffeeScript 1.6.3
var a, b, collision, dimensions, temp, testAABB, testInterval, vec3, voxel;

vec3 = require('math').vec3;

module.exports = collision = {};

testInterval = function(s1, f1, s2, f2) {
  return !(s2 > f1 || s1 > f2);
};

testAABB = function(a, b) {
  if (!testInterval(a.min[0], a.max[0], b.min[0], b.max[0])) {
    return false;
  }
  if (!testInterval(a.min[1], a.max[1], b.min[1], b.max[1])) {
    return false;
  }
  if (!testInterval(a.min[2], a.max[2], b.min[2], b.max[2])) {
    return false;
  }
  return true;
};

temp = vec3.create();

voxel = vec3.create();

dimensions = vec3.fromValues(1, 1, 1);

a = {
  min: vec3.create(),
  max: vec3.create()
};

b = {
  min: vec3.create(),
  max: vec3.create()
};

collision.collide = function(out, subject, volume) {
  var i, j, k, _i, _j, _k, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
  if (out == null) {
    out = temp;
  }
  vec3.floor(voxel, subject.position);
  vec3.copy(a.min, subject.position);
  a.min[0] -= 0.25;
  a.min[2] -= 0.25;
  vec3.copy(a.max, subject.position);
  a.max[0] += 0.25;
  a.max[1] += 1.75;
  a.max[2] += 0.25;
  for (i = _i = _ref = voxel[0] - 1, _ref1 = voxel[0] + 1; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; i = _ref <= _ref1 ? ++_i : --_i) {
    for (j = _j = _ref2 = voxel[1] - 1, _ref3 = voxel[1] + 1; _ref2 <= _ref3 ? _j <= _ref3 : _j >= _ref3; j = _ref2 <= _ref3 ? ++_j : --_j) {
      for (k = _k = _ref4 = voxel[2] - 1, _ref5 = voxel[2] + 1; _ref4 <= _ref5 ? _k <= _ref5 : _k >= _ref5; k = _ref4 <= _ref5 ? ++_k : --_k) {
        if (!volume.solid(i, j, k)) {
          continue;
        }
        vec3.set(b.min, i, j, k);
        vec3.add(b.max, b.min, dimensions);
        if (testAABB(a, b)) {
          vec3.set(out, i, j, k);
          return true;
        }
      }
    }
  }
  return false;
};
